generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
}

model Company {
  logoUrl String?
  name    String     @id @unique
  offers  JobOffer[]
}

model PositionLevel {
  id        String     @id @default(uuid())
  value     String     @unique
  jobOffers JobOffer[] @relation("PositionLevels")
}

model ContractType {
  id        String     @id @default(uuid())
  value     String     @unique
  jobOffers JobOffer[] @relation("ContractTypes")
}

model WorkMode {
  id        String     @id @default(uuid())
  value     String     @unique
  jobOffers JobOffer[] @relation("WorkModes")
}

model WorkSchedule {
  id        String     @id @default(uuid())
  value     String     @unique
  jobOffers JobOffer[] @relation("WorkSchedules")
}

model Technology {
  id        String     @id @default(uuid())
  value     String     @unique
  count     Int        @default(0)
  jobOffers JobOffer[] @relation("Technologies")
}

model OfferUrl {
  id         String   @id @default(uuid())
  value      String
  jobOfferId String
  jobOffer   JobOffer @relation("OfferUrls", fields: [jobOfferId], references: [id], onDelete: Cascade)

  @@index([jobOfferId])
}

model Workplace {
  id        String     @id @default(uuid())
  value     String     @unique
  city      String
  address   String?
  count     Int        @default(0)
  jobOffers JobOffer[] @relation("Workplaces")

  @@index([value, city])
}

model SalaryRange {
  id         String   @id @default(uuid())
  min        Int      @default(0)
  max        Int      @default(0)
  currency   String   @default("pln")
  type       String   @default("brutto")
  timeUnit   String   @default("month")
  jobOfferId String
  jobOffer   JobOffer @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)

  @@index([jobOfferId])
}

model DataSource {
  id        String     @id @default(uuid())
  name      String     @unique
  value     String
  jobOffers JobOffer[]
}

model JobOffer {
  id             String          @id @default(uuid())
  slug           String
  positionName   String
  dataSourceId   String?
  dataSource     DataSource?     @relation(fields: [dataSourceId], references: [id])
  dataSourceCode String?
  description    String?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @default(now()) @updatedAt
  expirationDate DateTime?       @default(now())
  companyName    String?
  company        Company?        @relation(fields: [companyName], references: [name])
  salaryRange    SalaryRange[]
  positionLevels PositionLevel[] @relation("PositionLevels")
  contractTypes  ContractType[]  @relation("ContractTypes")
  workModes      WorkMode[]      @relation("WorkModes")
  workSchedules  WorkSchedule[]  @relation("WorkSchedules")
  technologies   Technology[]    @relation("Technologies")
  workplaces     Workplace[]     @relation("Workplaces")
  offerUrls      OfferUrl[]      @relation("OfferUrls")

  @@index([companyName])
  @@index([dataSourceId])
}

// Probably to delete as I fetch these general stats with GeneralStatistics
model OffersMetadata {
  id        String   @id @default("offers-metadata")
  updatedAt DateTime @updatedAt
  total     Int      @default(0)
}

// Stats models
model TopWorkplace {
  id           String            @id @default(uuid())
  city         String
  count        Int               @default(0)
  statisticsId String            @default("general-statistics")
  statistics   GeneralStatistics @relation(fields: [statisticsId], references: [id])

  @@index([statisticsId])
}

model TopCategory {
  id                  String             @id @default(uuid())
  value               String
  count               Int                @default(0)
  generalStatisticsId String?            @default("general-statistics")
  generalStatistics   GeneralStatistics? @relation(fields: [generalStatisticsId], references: [id])
  // @@index([categoryStatisticsId])

  // categoryStatisticsId String?
  // categoryStatistics   CategoryStatistics? @relation(fields: [categoryStatisticsId], references: [id])
  @@index([generalStatisticsId])
}

model GeneralStatistics {
  id            String         @id @default("general-statistics")
  updatedAt     DateTime       @updatedAt
  totalOffers   Int            @default(0)
  topWorkplaces TopWorkplace[]
  topCategories TopCategory[]
}

model AllOffersCountStatistics {
  id          String    @id @default(uuid())
  createdAt   DateTime? @default(now())
  totalOffers Int       @default(0)
}

model OffersCountStatistics {
  id           String    @id @default(uuid())
  createdAt    DateTime? @default(now())
  juniorOffers Int       @default(0)
  midOffers    Int       @default(0)
  seniorOffers Int       @default(0)
  otherOffers  Int       @default(0)
}

model CategorySingleStatistic {
  id                   String               @id @default(uuid())
  name                 String
  count                Int                  @default(0)
  categoryStatisticsId String
  categoryStatistics   CategoriesStatistics @relation(fields: [categoryStatisticsId], references: [id], onDelete: Cascade)

  @@index([categoryStatisticsId])
}

model CategoriesStatistics {
  id         String                    @id @default(uuid())
  createdAt  DateTime?                 @default(now())
  categories CategorySingleStatistic[]
}

model WorkplaceSingleStatistic {
  id                    String               @id @default(uuid())
  city                  String
  count                 Int                  @default(0)
  workplaceStatisticsId String
  workplaceStatistics   WorkplacesStatistics @relation(fields: [workplaceStatisticsId], references: [id], onDelete: Cascade)

  @@index([workplaceStatisticsId])
}

model WorkplacesStatistics {
  id         String                     @id @default(uuid())
  createdAt  DateTime?                  @default(now())
  workplaces WorkplaceSingleStatistic[]
}

model DataSourceSingleStatistic {
  id                      String                 @id @default(uuid())
  name                    String
  count                   Int                    @default(0)
  dataSourcesStatisticsId String?
  dataSourcesStatistics   DataSourcesStatistics? @relation(fields: [dataSourcesStatisticsId], references: [id])

  @@index([dataSourcesStatisticsId])
}

model DataSourcesStatistics {
  id          String                      @id @default(uuid())
  createdAt   DateTime?                   @default(now())
  dataSources DataSourceSingleStatistic[]
}
